import streamlit as st
import pandas as pd
import pickle
import re
import matplotlib.pyplot as plt
import seaborn as sns
from surprise import Reader, Dataset, SVD, SVDpp, NMF, SlopeOne, KNNBasic, KNNBaseline, KNNWithMeans, KNNWithZScore, CoClustering, BaselineOnly
from surprise.model_selection.validation import cross_validate

# Function to get recommendations based on cosine similarity
def get_recommendations(df, ma_san_pham, cosine_sim, nums=5):
    # Ensure product IDs match the indices of cosine similarity matrix
    # Find the index of the selected product in df_products
    idx = df.index[df['ma_san_pham'] == ma_san_pham].tolist()
    
    if not idx:
        print(f"No product found with ID: {ma_san_pham}")
        return pd.DataFrame()  # Return an empty DataFrame
    
    idx = idx[0]  # Get the first index if there are multiple matches
    
    # Ensure that the index is within the bounds of the cosine similarity matrix
    if idx >= len(cosine_sim):
        print(f"Index {idx} is out of bounds for cosine similarity matrix.")
        return pd.DataFrame()  # Return an empty DataFrame if index is out of bounds
    
    # Get cosine similarity scores for the selected product
    sim_scores = list(enumerate(cosine_sim[idx]))
    
    # Sort products based on similarity scores in descending order
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    
    # Exclude the first product as it's the same one we selected
    sim_scores = sim_scores[1:nums+1]
    
    # Extract the indices of the most similar products
    product_indices = [i[0] for i in sim_scores]
    
    # Return the recommended products
    return df.iloc[product_indices]
# h√†m g·ª£i √Ω s·∫£n ph·∫©m v√† l·ªçc theo ƒëi·ªÅu ki·ªán
def display_recommended_products_1(recommended_products,ma_san_pham,df_output,cols=5):
    recommended_products = recommended_products[recommended_products["diem_trung_binh"] >= 4.5]
    recommended_products = recommended_products[recommended_products['ma_san_pham'] != ma_san_pham]
    if len(recommended_products) > 3:
        recommended_products = recommended_products[0:3]
    for i in range(0, len(recommended_products), cols):
        columns = st.columns(cols)
        for j, col in enumerate(columns):
            if i + j < len(recommended_products):
                product = recommended_products.iloc[i + j]
                with col:
                    with st.container(border=True):
                        st.image(product['hinh_anh'])
                        st.write(product['ten_san_pham'])
                        st.write("M√£ s·∫£n ph·∫©m :",product['ma_san_pham'])
                        st.write("Gi√° :",product['gia_ban'],' VNƒê')
                        st.write("Sao :",product['diem_trung_binh'],' ‚≠ê')
                        luotmua = df_output[df_output['ma_san_pham']==product['ma_san_pham']].groupby('ma_san_pham',as_index=False)['ma_khach_hang'].count()
                        if len(luotmua) > 0:
                            st.write("L∆∞·ª£t mua: ", luotmua['ma_khach_hang'][0]," üõí")
                        else:
                            st.write("L∆∞·ª£t mua: 0 üõí")
                        expander=st.expander("M√¥ t·∫£")
                        truncated_description = ' '.join(product['mo_ta'].split()[:100]) + '...'
                        expander.write(truncated_description)
                        # N√∫t Xem th√™m
                        xem_them_key = f"xem_them_{product['ma_san_pham']}"
                        if st.button("Xem th√™m", key=xem_them_key):
                            # C·∫≠p nh·∫≠t s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn
                            st.session_state.selected_ma_san_pham = product['ma_san_pham']
                            st.session_state['selected_product'] = product
                            # L√†m m·ªõi trang
                            st.rerun()



# h√†m g·ª£i √Ω s·∫£n ph·∫©m t∆∞·ª£ng t·ª± 
def display_recommended_products(recommended_products,df_output,cols=5):
    for i in range(0, len(recommended_products), cols):
        columns = st.columns(cols)
        for j, col in enumerate(columns):
            if i + j < len(recommended_products):
                product = recommended_products.iloc[i + j]
                with col:
                    with st.container(border=True):
                        st.image(product['hinh_anh'])
                        st.write(product['ten_san_pham'])
                        st.write("M√£ s·∫£n ph·∫©m :",product['ma_san_pham'])
                        st.write("Gi√° :",product['gia_ban'],' VNƒê')
                        st.write("sao :",product['diem_trung_binh'],' ‚≠ê')
                        luotmua = df_output[df_output['ma_san_pham']==product['ma_san_pham']].groupby('ma_san_pham',as_index=False)['ma_khach_hang'].count()
                        if len(luotmua) > 0:
                            st.write("L∆∞·ª£t mua: ", luotmua['ma_khach_hang'][0]," üõí")
                        else:
                            st.write("L∆∞·ª£t mua: 0 üõí")
                        expander=st.expander("M√¥ t·∫£")
                        truncated_description = ' '.join(product['mo_ta'].split()[:100]) + '...'
                        expander.write(truncated_description)
# recommended collab
def recommended_collab(userId,df_sub,df_select,algorithm_KNN):
    # #lo·∫°i b·ªè nh·ªØng s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c mua
    df_list= df_select['ma_san_pham'].tolist()
    df_score = df_sub[~df_sub['ma_san_pham'].isin(df_list)]
    df_score.reset_index(drop=True,inplace=True)

    #t·∫°o c·ªôt v√† d·ª± ƒëo√°n c√°c gi√° tr·ªã
    df_score['EstimateScore'] = df_score['ma_san_pham'].apply(lambda x: algorithm_KNN.predict(userId, x).est) # est: get EstimateScore

    #s·∫Øp x·∫øp l·∫°i c√°c gi√° tr·ªã theo th·ª© t·ª± gi·∫£m d·∫ßn
    df_score = df_score.sort_values(by=['EstimateScore'], ascending=False)

    #x√≥a d·ªØ li·ªáu tr√πng
    df_score = df_score.drop_duplicates(subset='ma_san_pham', keep='first')
    #l·ªçc nh·ªØng d√≤ng c√≥ EstimateScore >= 4
    df_score = df_score[df_score['EstimateScore'] >= 4].head(9)
    return df_score
    


# h√†m g·ª£i √Ω s·∫£n ph·∫©m theo ng∆∞·ªùi d√πng
def Login_show(recommended_collab,display_recommended_products,df_customer,df_output,df_products,selected_username,algorithm_KNN):
    # l·∫•y id
    get_id = df_customer[df_customer['username']==selected_username[0]]['ma_khach_hang'].reset_index(drop='index')[0]
    # t·ª´ id ƒë√£ c√≥ , l·∫•y s·∫£n ph·∫©m
    customer_products = df_output[df_output['ma_khach_hang'] == get_id]['ma_san_pham'].tolist()
    if customer_products:
        st.write("### S·∫£n ph·∫©m ƒë√£ mua:")
        # t·ª´ id s·∫£n ph·∫©m , l·∫•y th√¥ng tin s·∫£n ph·∫©m
        purchased_products = df_products[df_products['ma_san_pham'].isin(customer_products)]
        st.dataframe(purchased_products[['ma_san_pham', 'ten_san_pham']])

        st.write("### G·ª£i √Ω s·∫£n ph·∫©m li√™n quan:")
        recommendations = recommended_collab(
        get_id,
        df_output,
        purchased_products,
        algorithm_KNN
        )
        # st.dataframe(recommendations)
        df_list = recommendations['ma_san_pham'].tolist()
        recommendations =  df_products[df_products['ma_san_pham'].isin(df_list)]
        display_recommended_products(recommendations,df_output, cols=3)
    else:
        st.info(f"Kh√°ch h√†ng **{selected_username[2]}** ch∆∞a mua s·∫£n ph·∫©m n√†o.")
        st.write("### G·ª£i √Ω s·∫£n ph·∫©m ƒëang hot:")

        # l·∫•y ra 9 s·∫£n ph·∫©m ƒë∆∞·ª£c mua nhi·ªÅu nh·∫•t
        df_top9 = df_output.groupby('ma_san_pham',as_index=False)['so_sao'].count().sort_values(by='so_sao').tail(9)

        # l·∫•y ƒëi·ªÉm trung b√¨nh c·ªßa top 9 s·∫£n ph·∫©m
        top9_merged = pd.merge(df_top9, df_products, on="ma_san_pham",how="left")
        #l·ªçc l·∫•y nh·ªØng s·∫£n ph·∫©m c√≥ ƒëi·ªÉm trung b√¨nh >= 4.5
        top9_merged = top9_merged[top9_merged['diem_trung_binh'] >= 4.5]
        display_recommended_products(top9_merged,df_output, cols=3)


        
    
# Read data
df_products = pd.read_csv('data/Product.csv')
df_customer = pd.read_csv('data/Customer1.csv')
df_output = pd.read_csv('data/Danh_gia1.csv')

# Load precomputed cosine similarity
with open('model/products_cosine_sim_.pkl', 'rb') as f:
    cosine_sim_new = pickle.load(f)

# Load model surprise Knn
with open('model/surprise_knn_model.pkl', 'rb') as f:
    algorithm_KNN = pickle.load(f)

###### Streamlit Interface ######

    # GUI
st.title("Data Science Project")
st.write("## Product Recommendation")

menu = ["Business Objective", "Build Project", "Login - Collaborative Filtering", "Content Based Filtering"]
choice = st.sidebar.selectbox('Menu', menu)
st.sidebar.write("""#### Th√†nh vi√™n th·ª±c hi·ªán:\n
                Tr·∫ßn ƒêƒÉng Di·ªáp & V≈© Th·ªã Thanh Tr√∫c""")
st.sidebar.write("""#### Gi·∫£ng vi√™n h∆∞·ªõng d·∫´n: 
                        Khu·∫•t Th√πy Ph∆∞∆°ng""")
st.sidebar.write("""#### Th·ªùi gian th·ª±c hi·ªán: 7/12/2024""")
if choice == 'Business Objective':    
    st.subheader("Business Objective")
    st.write("""
    ###### V·∫•n ƒë·ªÅ : M·ªôt khi ƒë√£ hi·ªÉu ƒë∆∞·ª£c kh√°ch h√†ng v√† nhu c·∫ßu c·ªßa h·ªç, ch√∫ng ta x√¢y d·ª±ng ƒë∆∞·ª£c 1 h·ªá th·ªëng g·ª£i √Ω th√¥ng minh mang nh·ªØng s·∫£n ph·∫©m ph√π h·ª£p ƒë·∫øn v·ªõi kh√°ch h√†ng, t·ª´ ƒë√≥ n√¢ng cao doanh s·ªë v√† tr·∫£i nghi·ªám ng∆∞·ªùi d√πng.
    """)  
    st.write("""###### => Y√™u c·∫ßu: X√¢y d·ª±ng thu·∫≠t to√°n ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m d·ª±a tr√™n l·ªãch s·ª≠ mua h√†ng.""")
    st.image('images/hasaki_banner_2.jpg', use_container_width=True)

elif choice == "Build Project":
    st.write("#### 1. Some data")
    st.write("##### san_pham.csv")
    st.dataframe(df_products.head(3))
    st.write("##### danh_gia.csv")
    st.dataframe(df_output.head(3))
    st.write("##### khach_hang.csv")
    st.dataframe(df_customer.head(3))

    st.write("#### 2. Visualize sentiment")
    fig1 = sns.countplot(data=df_products, x='diem_trung_binh')
    plt.xticks(rotation=90)    
    st.pyplot(fig1.figure)

    st.write("## I. Content Based Filtering")
    st.write('#### Data preprocessing')
    st.write(' -T·∫°o c·ªôt content, l·ªçc kho·∫£ng tr·∫Øng v√† l·∫•y ra 200 t·ª´ c·ªßa c·ªôt mo_ta ')
    st.write(' -T·∫°o c·ªôt content_wt , d√πng word_tokenize c·ªßa th∆∞ vi·ªán UndertheSea ƒë·ªÉ t√°ch t·ª´')
    st.write(' K·∫øt qu·∫£ :')
    st.image('images/after_pre.png',width=900)

    
    st.write("####  Build model...")
    st.write("- D√πng TFIDF ƒë·ªÅ vector h√≥a n·ªôi dung c·ªôt content_wt")
    st.write("- T√≠nh ƒë·ªô t∆∞∆°ng ƒë·ªìng b·∫±ng model Cosine")
    st.image("images/build_model_1.png",width=900)
    st.image("images/build_model_2.png",width=900)

    st.write("####  Evaluation")
    st.write("Th·ªùi gian t√≠nh to√°n : 0.08s ")
    st.write("Th∆°i gian t√¨m ki·∫øm s·∫£n ph·∫©m t∆∞∆°ng ƒë·ªìng : 0.001s ") 
    st.write('k·∫øt qu·∫£ d·ª± ƒëo√°n :')
    st.image('images/after_build_1.png',width=900)
    st.image('images/after_build_model_1.png',width=900)

    #### Collaborative Filtering
    st.write("## II. Collaborative Filtering")
    st.write('#### Data preprocessing')
    st.write(' - X√≥a d·ªØ li·ªáu Null, Nan ')
    st.write(' - Ch·ªçn ra c√°c c·ªôt c·∫ßn thi·∫øt ƒë·ªÉ hu·∫•n luy·ªán')
    st.image('images/build_Collab_1.png',width=900)
    st.write('- Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu')
    st.image('images/build_Collab_2.png',width=900)
    st.write('- ƒê·ªçc d·ªØ li·ªáu b·∫±ng Reader ')
    st.image('images/build_Collab_reader.png',width=900)

    st.write("####  Build model and Evaluation")
    st.write("- Turning v√† l·∫•y si√™u tham s·ªë t·ªët nh·∫•t")
    st.write("- Hu·∫•n luy·ªán m√¥ h√¨nh v·ªõi tham s·ªë ƒë√£ turning")
    st.image("images/build_Collab_3.png",width=900)
    

    st.write("#### Prediction")
    st.write("""- Vi·∫øt h√†m g·ª£i √Ω 5 s·∫£n ph·∫©m t·ªët nh·∫•t cho kh√°ch h√†ng :
             Lo·∫°i b·ªè s·∫£n ph·∫©m ƒë√£  mua , t√≠nh EstimateScore , 
             s·∫Øp x·∫øp c√°c gi√° tr·ªã theo th·ª© t·ª±,
             l·ªçc EstimateScore >= 4 """)
    st.image('images/build_Collab_4.png',width=900)

elif choice == 'Login - Collaborative Filtering':
    # l∆∞u tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
    if "logged_in" not in st.session_state:
        st.session_state["logged_in"] = False
    # l∆∞u l·∫°i th√¥ng tin kh√°ch h√†ng ƒë√£ ƒëƒÉng nh·∫≠p
    if "data" not in st.session_state:
        st.session_state["data"] = None
    if not st.session_state["logged_in"]:  
        st.title("ƒêƒÉng nh·∫≠p")
        user_options = [
            (row['username'], row['password'],row['ho_ten'])
            for _, row in df_customer[0:6].iterrows()]
        with st.container(border=True):
            selected_username = st.selectbox(
            "Ch·ªçn t√†i kho·∫£n",
            options=user_options,
            format_func=lambda x: x[0])
            selected_password = selected_username[1]
            password = st.text_input("M·∫≠t kh·∫©u", type="password",value=selected_password)
            # X·ª≠ l√Ω khi nh·∫•n n√∫t "ƒêƒÉng nh·∫≠p"
            # G·ª£i √Ω cho ng∆∞·ªùi d√πng
            st.info("M·∫≠t kh·∫©u t·ª± ƒë·ªông ƒë∆∞·ª£c ƒëi·ªÅn theo t√†i kho·∫£n ƒë√£ ch·ªçn.")
            if st.button("ƒêƒÉng Nh·∫≠p"):
                if selected_password == password:
                    st.session_state["logged_in"] = True
                    st.session_state["data"] = selected_username
                    st.rerun()
                else:
                    st.error("Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u.")

    
    else:
        selected_username = st.session_state["data"]
        st.success(f"Ch√†o m·ª´ng {selected_username[2]} ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng.")
        if st.button("ƒêƒÉng xu·∫•t"):
            
            st.session_state["logged_in"] = False
            st.rerun()
        Login_show(recommended_collab,display_recommended_products,df_customer,df_output,df_products,selected_username,algorithm_KNN)


   
        

elif choice == 'Content Based Filtering':
    # Step 2: Select a product and get similar product recommendations
    st.write("---")
    st.write("## G·ª£i √Ω s·∫£n ph·∫©m t∆∞∆°ng t·ª±")

    if 'random_products' not in st.session_state:
        st.session_state.random_products = df_products
    if 'select_products' not in st.session_state:
        st.session_state.select_products = None

    product_options = [
        (row['ten_san_pham'], row['ma_san_pham'])
        for _, row in st.session_state.random_products.iterrows()
    ]

    # C·∫≠p nh·∫≠t s·∫£n ph·∫©m m·∫∑c ƒë·ªãnh trong selectbox
    if 'selected_ma_san_pham' in st.session_state:
        default_product = next(
            (option for option in product_options if option[1] == st.session_state.selected_ma_san_pham),
            product_options[0]
        )
    else:
        default_product = product_options[0]

    selected_product = st.selectbox(
    "Ch·ªçn s·∫£n ph·∫©m",
    options=product_options,
    index=product_options.index(default_product),
    format_func=lambda x: x[0]
    )

    st.write("B·∫°n ƒë√£ ch·ªçn:", selected_product)
    st.session_state.selected_ma_san_pham = selected_product[1]

    if st.session_state.selected_ma_san_pham:
        selected_product_df = df_products[df_products['ma_san_pham'] == st.session_state.selected_ma_san_pham]

        if not selected_product_df.empty:
            st.write('#### B·∫°n v·ª´a ch·ªçn:')
            st.write('### ', selected_product_df['ten_san_pham'].values[0])

            product_description = selected_product_df['mo_ta'].values[0]
            st.image(selected_product_df['hinh_anh'].values[0])
            truncated_description = ' '.join(product_description.split()[:100])
            st.write('##### Th√¥ng tin:')
            st.write(truncated_description, '...')
            st.write('#### Gi√° :',selected_product_df['gia_ban'].values[0],' VNƒê')
            st.write('#### Sao :',selected_product_df['diem_trung_binh'].values[0],' ‚≠ê')
            luotmua = df_output[df_output['ma_san_pham']==selected_product_df['ma_san_pham'].values[0]].groupby('ma_san_pham',as_index=False)['ma_khach_hang'].count()
            if len(luotmua) > 0:
                st.write("### L∆∞·ª£t mua: ", luotmua['ma_khach_hang'][0]," üõí")
            else:
                st.write("### L∆∞·ª£t mua: 0 üõí")
            st.write("## ƒê√°nh gi√° ")
            #get product code
            msp = selected_product_df['ma_san_pham'].values[0]
            # V·∫Ω bi·ªÉu ƒë·ªì
            paint = df_output[df_output['ma_san_pham']==msp].groupby('so_sao',as_index=False)['ma_khach_hang'].count()
            paint.rename(columns={"ma_khach_hang":"tong_so_luong"}, inplace=True)
            
            if len(paint) >0 :
                with st.container(border=True):
                    st.write("T·ªïng s·ªë sao ƒë∆∞·ª£c vote t·ª´ kh√°ch h√†ng")
                    st.bar_chart(paint, x="so_sao", y="tong_so_luong", horizontal=True)
                      # l·∫•y ƒë·ªô d√†i c·ªßa df m√£ kh√°ch h√†ng
                df_mkh = df_output[df_output['ma_san_pham']==msp]
                
                # if len(df_mkh) >= 1:
                st.write("### C√°c b√¨nh lu·∫≠n c·ªßa kh√°ch h√†ng ")
                for i in range(0,len(df_mkh)):
                    if i == 3:
                        break
                    with st.container(border=True):
                        # get m√£ kh√°ch h√†ng
                        mkh = df_mkh['ma_khach_hang'].values[i]
                        # Write
                        st.write("Kh√°ch h√†ng : ",df_customer[df_customer['ma_khach_hang']==mkh]['ho_ten'].values[0])
                        st.write("B√¨nh Lu·∫≠n  : ",df_output[df_output['ma_san_pham']==msp]['noi_dung_binh_luan'].values[i])
                        st.write("Vote : ",df_output[df_output['ma_san_pham']==msp]['so_sao'].values[i],' ‚≠ê')
                        st.write("Ng√†y b√¨nh lu·∫≠n : ",df_output[df_output['ma_san_pham']==msp]['ngay_binh_luan'].values[i])
                    
            else:
                st.write("### S·∫£n ch∆∞a c√≥ l∆∞·ª£t ƒë√°nh gi√° n√†o!")

            st.write('### C√°c s·∫£n ph·∫©m li√™n quan:')

            recommendations = get_recommendations(
                df_products,
                st.session_state.selected_ma_san_pham,
                cosine_sim=cosine_sim_new,
                nums=6
            )
            display_recommended_products_1(recommendations,st.session_state.selected_ma_san_pham,df_output, cols=3)
            st.success('ƒê√£ ƒë·ªïi th√¥ng tin s·∫£n ph·∫©m ')   



        else:
            st.write(f"Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: {st.session_state.selected_ma_san_pham}")
            


